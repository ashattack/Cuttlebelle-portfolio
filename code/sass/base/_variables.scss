// Colors
$color-Hero-Background-light: #b2e1d8;
$color-Hero-Background: #00a887;
$color-Text: #06262d;
$color-Background: #ededed;
$color-Background-light: #f5f5f5;
$color-Background-dark: darken( $color-Background, 20% );
$color-Focus: #ff5400;


// mixins
@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

// functions
/**
 * replace - Replace a string with a string
 * http://codepen.io/jakob-e/pen/doMoML
 *
 * @author @eriksen_dk <https://twitter.com/eriksen_dk>
 *
 * @param  {string} $string  - The haystack string to be manipulated
 * @param  {string} $search  - The needle to be replace
 * @param  {string} $replace - The replacement
 *
 * @return {string}          - The manipulated string with replaced values
 */
@function replace( $string, $search, $replace: '' ) {
	@if type-of( $string ) != 'string' {
		@error "I have a bad feeling about this; the replace first argument must be a string!";
	}

	@if type-of( $search ) != 'string' {
		@error "Weâ€™ll always have Paris; the replace second argument must be a string!";
	}

	@if type-of( $replace ) != 'string' {
		@error "Hasta la vista, baby; the replace third argument must be a string!";
	}

	$index: str-index( $string, $search );

	@return if( $index,
		str-slice( $string, 1, $index - 1 ) +
		$replace +
		replace(
			str-slice( $string, $index + str-length( $search )
		), $search, $replace ),
		$string
	);
}

/**
 * svguri - Generate an optimized SVG data-uri
 * https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
 * http://codepen.io/jakob-e/pen/doMoML
 *
 * @author @eriksen_dk <https://twitter.com/eriksen_dk>
 *
 * @param  {string} $svg - The SVG to be converted
 *
 * @return {string}      - An optimized data-uri
 */
@function svguri( $svg ) {
	@if type-of( $svg ) != 'string' {
		@error "With great power comes great responsibility; the svguri function only takes a string!";
	}

	@if not str-index( $svg, xmlns ) { // Add missing namespace
		$svg: replace( $svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"' );
	}

	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil( str-length( $svg ) / $slice ); // Chunk up string in order to avoid "stack level too deep" error

	@for $i from 1 through $loops {
		$chunk: str-slice( $svg, $index, $index + $slice - 1 );

		$chunk: replace( $chunk,'"', "'" );
		$chunk: replace( $chunk,'	', " " );
		$chunk: replace( $chunk,"
", " " );
		$chunk: replace( $chunk,"\a", " " );
		$chunk: replace( $chunk,'  ', " " );
		$chunk: replace( $chunk,'%', '%25' );
		$chunk: replace( $chunk,'&', '%26' );
		$chunk: replace( $chunk,'#', '%23' );
		$chunk: replace( $chunk,'{', '%7B' );
		$chunk: replace( $chunk,'}', '%7D' );
		$chunk: replace( $chunk,'<', '%3C' );
		$chunk: replace( $chunk,'>', '%3E' );

		/*    The maybe list

			 Keep size and compile time down
			 ... only add on documented fail

		 $chunk: replace( $chunk, '|', '%7C' );
		 $chunk: replace( $chunk, '[', '%5B' );
		 $chunk: replace( $chunk, ']', '%5D' );
		 $chunk: replace( $chunk, '^', '%5E' );
		 $chunk: replace( $chunk, '`', '%60' );
		 $chunk: replace( $chunk, ';', '%3B' );
		 $chunk: replace( $chunk, '?', '%3F' );
		 $chunk: replace( $chunk, ':', '%3A' );
		 $chunk: replace( $chunk, '@', '%40' );
		 $chunk: replace( $chunk, '=', '%3D' );
		*/

		$encoded: #{ $encoded }#{ $chunk };
		$index: $index + $slice;
	}

	@return url("data:image/svg+xml,#{ $encoded }");
}
